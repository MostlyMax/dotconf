; color variable choices: red, blue, green
(defvar color "red")
(defvar eww "eww -c ~/.config/eww/catppuccin")
(defpoll month :interval "10m" "date +%b")
(defpoll date :interval "5m" "date +%e")
(defpoll hour :interval "5s" "date '+%I'")
(defpoll min :interval "5s" "date '+%M'")
(defvar layout "tiled")
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")


(defwidget bar []
  (box :class "main-box" :orientation "h" :space-evenly true :valign "center" :height 30

  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :orientation "h" :valign "center" :space-evenly false :spacing 10
      (label :class "txt" :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :halign "start" :valign "center" :class "workspace-box" :orientation "h" :space-evenly false :spacing 5
            (overlay (box :class "${workspace.id == current_workspace ? "selected" : ""}" :width 20 :height 20)
            (label :class "${workspace.id == current_workspace ? "selected" : workspace.windows > 0 ? "occupied" : "empty"}" :text "${workspace.id}"))
            )
          )
        )
      )
    )

		; RIGHT: Time, date, layout switcher
		(box  :valign "center" :halign "end" :space-evenly false
			(box :class "memory-box" :space-evenly false :spacing 3
				(label :class "txt glyph" :text "")
				(label :class "txt" :limit-width 4 :show-truncated false :text "${EWW_RAM.used_mem / 1073741824}")
				(label :class "txt unit" :text "GB"))
			(box :class "cpu-box" :space-evenly false :spacing 3
				(label :class "txt glyph" :text "")
				(label :class "txt" :limit-width 4 :show-truncated false :text "${EWW_CPU.avg}")
				(label :class "txt unit" :text "%"))
			(box :class "time-box"
				(label :class "txt" :text "${month} ${date} | ${hour}:${min}"))
    )
  )
)

(defwindow bar
	:geometry (geometry :width "100%" :anchor "top center")
  :window-type "dock"
	:monitor 0
  :exclusive true
	(bar))

